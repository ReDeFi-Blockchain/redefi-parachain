// Template adopted from https://github.com/paritytech/substrate/blob/master/.maintain/frame-weight-template.hbs

//! Autogenerated weights for pallet_private_balances_aura_ext
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 35.0.1
//! DATE: 2024-07-18, STEPS: `500`, REPEAT: `200`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ubuntu-11`, CPU: `Intel Xeon Processor (Cooperlake)`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/redefi-collator
// benchmark
// pallet
// --chain
// dev
// --wasm-execution=compiled
// --pallet
// pallet_private_balances_aura_ext
// --extrinsic
// set_trusted_authorities
// --steps
// 500
// --repeat
// 200
// --template=.maintain/frame-weight-template.hbs
// --output
// ./pallets/private-balances-aura-ext/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_private_balances_aura_ext.
pub trait WeightInfo {
	fn set_trusted_authorities() -> Weight;
}

/// Weights for pallet_private_balances_aura_ext using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `PrivateBalancesAuraExt::TrustedAuthorities` (r:0 w:1)
	/// Proof: `PrivateBalancesAuraExt::TrustedAuthorities` (`max_values`: Some(1), `max_size`: Some(3200004), added: 3200499, mode: `MaxEncodedLen`)
	fn set_trusted_authorities() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 785_000 picoseconds.
		Weight::from_parts(917_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `PrivateBalancesAuraExt::TrustedAuthorities` (r:0 w:1)
	/// Proof: `PrivateBalancesAuraExt::TrustedAuthorities` (`max_values`: Some(1), `max_size`: Some(3200004), added: 3200499, mode: `MaxEncodedLen`)
	fn set_trusted_authorities() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 785_000 picoseconds.
		Weight::from_parts(917_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}

